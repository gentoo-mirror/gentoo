--- a/src/converter/internal/compat/backendapi.cpp
+++ b/src/converter/internal/compat/backendapi.cpp
@@ -268,11 +268,11 @@ QVariantMap BackendApi::readBeatsColors(const muse::io::path_t& filePath)
 
     QVariantMap result;
 
-    for (const QJsonValueRef colorObj: colors) {
+    for (const QJsonValue &colorObj: colors) {
         const QJsonArray beatsIndexes = colorObj[u"beats"].toArray();
         const QColor beatsColor = QColor(colorObj[u"color"].toString());
 
-        for (const QJsonValueRef index: beatsIndexes) {
+        for (const QJsonValue &index: beatsIndexes) {
             result[index.toString()] = beatsColor;
         }
     }
--- a/src/converter/internal/convertercontroller.cpp
+++ b/src/converter/internal/convertercontroller.cpp
@@ -258,7 +258,7 @@ RetVal<ConverterController::BatchJob> ConverterController::parseBatchJob(const m
         return io::Dir::fromNativeSeparators(path).toQString();
     };
 
-    for (const QJsonValueRef obj : arr) {
+    for (const QJsonValue &obj : arr) {
         Job job;
         job.in = correctUserInputPath(obj[u"in"].toString());
 
@@ -278,7 +278,7 @@ RetVal<ConverterController::BatchJob> ConverterController::parseBatchJob(const m
             rv.val.push_back(std::move(job));
         } else if (outValue.isArray()) {
             const QJsonArray outArray = outValue.toArray();
-            for (const QJsonValueRef outItem : outArray) {
+            for (const QJsonValue &outItem : outArray) {
                 Job partJob = job; // Copy the input path
                 if (outItem.isString()) {
                     partJob.out = correctUserInputPath(outItem.toString());
