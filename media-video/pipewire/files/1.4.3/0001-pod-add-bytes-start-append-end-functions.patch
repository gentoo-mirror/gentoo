From 483b59a9d95aa084dfcd1c17e13ee27bd106d4b0 Mon Sep 17 00:00:00 2001
Message-ID: <483b59a9d95aa084dfcd1c17e13ee27bd106d4b0.1748327071.git.sam@gentoo.org>
From: Wim Taymans <wtaymans@redhat.com>
Date: Fri, 23 May 2025 16:41:00 +0200
Subject: [PATCH 1/5] pod: add bytes start/append/end functions

Add functions to dynamically start and build a bytes pod.
---
 spa/include/spa/pod/builder.h | 25 +++++++++++++++++++++++++
 1 file changed, 25 insertions(+)

diff --git a/spa/include/spa/pod/builder.h b/spa/include/spa/pod/builder.h
index 553f75512..3dc4a4f1c 100644
--- a/spa/include/spa/pod/builder.h
+++ b/spa/include/spa/pod/builder.h
@@ -326,6 +326,31 @@ spa_pod_builder_reserve_bytes(struct spa_pod_builder *builder, uint32_t len)
 	return SPA_POD_BODY(spa_pod_builder_deref(builder, offset));
 }
 
+SPA_API_POD_BUILDER uint32_t
+spa_pod_builder_bytes_start(struct spa_pod_builder *builder)
+{
+	uint32_t offset = builder->state.offset;
+	const struct spa_pod_bytes p = SPA_POD_INIT_Bytes(0);
+	spa_pod_builder_raw(builder, &p, sizeof(p));
+	return offset;
+}
+SPA_API_POD_BUILDER int
+spa_pod_builder_bytes_append(struct spa_pod_builder *builder, uint32_t offset,
+		const void *data, uint32_t size)
+{
+	int res = spa_pod_builder_raw(builder, data, size);
+	struct spa_pod *pod = spa_pod_builder_deref(builder, offset);
+	if (pod)
+		pod->size += size;
+	return res;
+}
+
+SPA_API_POD_BUILDER int
+spa_pod_builder_bytes_end(struct spa_pod_builder *builder, uint32_t offset)
+{
+	return spa_pod_builder_pad(builder, builder->state.offset);
+}
+
 #define SPA_POD_INIT_Pointer(type,value) ((struct spa_pod_pointer){ { sizeof(struct spa_pod_pointer_body), SPA_TYPE_Pointer }, { (type), 0, (value) } })
 
 SPA_API_POD_BUILDER int
-- 
2.49.0

